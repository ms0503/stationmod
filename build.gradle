buildscript {
    repositories {
        maven {
            url 'https://maven.minecraftforge.net/'
        }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }
}

plugins {
    id 'idea'
    id 'maven-publish'
}

apply plugin: 'net.minecraftforge.gradle'

group 'ms.sora'
def modid = 'stationmod'
def modname = 'Station MOD / é§…MOD'
version '0.1.1-dev.0'
archivesBaseName = 'stationmod'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

tasks.withType(AbstractCompile) {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
    project {
        languageLevel = '1.8'
    }
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings 'snapshot', '20171003-1.12'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
        server {
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

createMcpToSrg {
    mappings = minecraft.mappings
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'
    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"
    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env
    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'Implementation-Title': modname,
            'Implementation-Version': version,
            'Implementation-Vendor' : 'Sora Tonami',
            'Specification-Title': modname,
            'Specification-Vendor': 'Sora Tonami',
            'Specification-Version': '1',
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

processResources {
    inputs.property 'version', version
    from(sourceSets.main.resources.srcDirs) {
        include 'assets/stationmod/models/item/*.json'
        include 'assets/stationmod/recipes/*.json'
        include 'mcmod.info'
        expand 'modid': modid, 'modname': modname, 'version': version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'assets/stationmod/models/item/*.json'
        exclude 'mcmod.info'
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

task versionSet(type: Copy) {
    doFirst {
        delete 'src/main/java/ms/sora/stationmod/ModInfo.java'
    }
    from 'template/ModInfo.java'
    into 'src/main/java/ms/sora/stationmod'
    expand 'modid': modid, 'modname': modname, 'version': version
}

compileJava.dependsOn(['versionSet'])

artifacts {
    archives javadocJar
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact(javadocJar) {
                classifier 'javadoc'
                extension 'jar'
            }
            artifact(sourcesJar) {
                classifier 'sources'
                extension 'jar'
            }
            pom {
                dependencies {
                    project.configurations.compile.dependencies.each { dep ->
                        dependency {
                            artifactId dep.name
                            groupId dep.group
                            version dep.version
                        }
                    }
                }
                description = 'A mod for Minecraft which adds many station-related items.'
                developers {
                    developer {
                        email = 'ms0503 <at> outlook.com'
                        id = 'ms0503'
                        name = 'Sora Tonami'
                    }
                }
                licenses {
                    license {
                        distribution = 'repo'
                        name = 'Minecraft Mod Public License, Version 1.0.1'
                        url = 'http://tsoft-web.com/nokiyen/minecraft/modding/MMPL'
                    }
                }
                name = archivesBaseName
                resolveStrategy = 1
                scm {
                    connection = 'scm:git:https://github.com/ms0503/stationmod.git'
                    developerConnection = 'scm:git:https://github.com/ms0503/stationmod.git'
                    url = 'https://github.com/ms0503/stationmod'
                }
                url = 'https://github.com/ms0503/stationmod'
            }
        }
    }
    repositories {
        maven {
            credentials {
                password = System.getenv('TOKEN')
                username = 'ms0503'
            }
            url 'https://maven.pkg.github.com/ms0503/stationmod'
        }
    }
}
